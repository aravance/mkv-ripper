package driveview

import "github.com/aravance/mkv-ripper/drive"
import "github.com/aravance/mkv-ripper/view/layout"
import "github.com/aravance/mkv-ripper/view/movie"
import "github.com/eefret/gomdb"
import "strconv"
import "github.com/aravance/go-makemkv"
import "fmt"

templ Show(status drive.DriveStatus, disc *drive.Disc, movie *gomdb.MovieResult, info *makemkv.DiscInfo) {
	@layout.Base("drive") {
		if status == drive.StatusEmpty {
			<div>No disc</div>
		} else if status == drive.StatusReading {
			<div>Reading disc</div>
		} else if info == nil {
			<div>Failed to read disc</div>
		} else {
			<div>
				@Status(status, disc)
				if movie != nil {
					@movieview.Movie(movie)
				}
				if info != nil {
					@DiscInfo(disc, info)
				}
			</div>
		}
	}
}

templ DiscInfo(disc *drive.Disc, info *makemkv.DiscInfo) {
	<div class="list-group">
		for _, t := range info.Titles {
			<a
				href={ templ.URL(fmt.Sprintf("/disc/%s/title/%d/rip", disc.Uuid, t.Id)) }
				class="list-group-item list-group-item-action"
			>
				<span class="fs-5 fw-medium">
					if t.Name != "" {
						{ strconv.Itoa(t.Id + 1) } - { t.Name }
					} else {
						Title { strconv.Itoa(t.Id + 1) }
					}
				</span>
				<ul class="fw-light list-unstyled m-0" style="font-size: small;">
					<li>File: { t.FileName }</li>
					<li>Source: { t.SourceFileName }</li>
				</ul>
			</a>
		}
	</div>
}

templ Status(status drive.DriveStatus, disc *drive.Disc) {
	if status == drive.StatusEmpty {
		<div>No disc</div>
	} else if status == drive.StatusReading {
		<div hx-get="/drive/status" hx-trigger="every 2s">
			Reading disc
		</div>
	} else if status == drive.StatusReady {
		<div>Ready</div>
	} else if status == drive.StatusMkv {
		<div hx-get="/drive/status" hx-trigger="every 2s">
			<span class="spinner-border spinner-border-sm" id="spinner" role="status" aria-hidden="true"></span>
			Ripping
			if disc != nil && disc.MkvStatus != nil {
				- { strconv.Itoa(disc.MkvStatus.Total * 100 / disc.MkvStatus.Max) }%
			}
		</div>
	} else {
		<div>Unknown</div>
	}
}
