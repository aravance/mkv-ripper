package driveview

import "github.com/aravance/mkv-ripper/drive"
import "github.com/aravance/mkv-ripper/view/layout"
import "github.com/aravance/mkv-ripper/view/movie"
import "github.com/eefret/gomdb"
import "strconv"
import "github.com/aravance/go-makemkv"
import "fmt"

templ Show(status drive.DriveStatus, disc *drive.Disc, movie *gomdb.MovieResult, info *makemkv.DiscInfo) {
	@layout.Base("mkv-ripper") {
		<div class="d-flex align-items-center py-4">
			<div class="m-auto w-100" style="max-width: 330px;">
				<h1 class="h3 mb-4 fw-normal">Drive</h1>
				if status == drive.StatusEmpty {
					<div>No disc</div>
				} else if status == drive.StatusReading {
					<div>Reading disc</div>
				} else if info == nil {
					<div>Failed to read disc</div>
				} else {
					<div>
						@Status(status, disc)
						if movie != nil {
							@movieview.Movie(movie)
						}
						if info != nil {
							@DiscInfo(disc, info)
						}
					</div>
				}
			</div>
		</div>
	}
}

templ DiscInfo(disc *drive.Disc, info *makemkv.DiscInfo) {
	<div class="list-group">
		for _, t := range info.Titles {
			<a
				href={ templ.URL(fmt.Sprintf("/disc/%s/title/%d/rip", disc.Uuid, t.Id)) }
				class="list-group-item list-group-item-action"
			>
				<h4>
					if t.Name != "" {
						{ strconv.Itoa(t.Id + 1) } - { t.Name }
					} else {
						Title { strconv.Itoa(t.Id + 1) }
					}
				</h4>
				<div>File: { t.FileName }</div>
				<div>Source: { t.SourceFileName }</div>
			</a>
		}
	</div>
}

templ Status(status drive.DriveStatus, disc *drive.Disc) {
	<div hx-get="/drive/status" hx-trigger="every 2s">
		if status == drive.StatusEmpty {
			No disc
		} else if status == drive.StatusReading {
			Reading disc
		} else if status == drive.StatusReady {
			Ready
		} else if status == drive.StatusMkv {
			<span class="spinner-border spinner-border-sm" id="spinner" role="status" aria-hidden="true"></span>
			Ripping -
			if disc != nil {
				{ strconv.Itoa(disc.MkvStatus.Total * 100 / disc.MkvStatus.Max) }%
			}
		} else {
			Unknown
		}
	</div>
}
